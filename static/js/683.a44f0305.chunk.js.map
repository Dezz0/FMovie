{"version":3,"file":"static/js/683.a44f0305.chunk.js","mappings":"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","sources":["entities/CarouselCard/ui/CarouselCard.tsx","webpack://react_movie/./src/pages/explore/ui/Explore.module.scss?f021","webpack://react_movie/./src/entities/explore/ui/ExploreHeader/ExploreHeader.module.scss?c3e1","features/explore/SelectGroup/SelectGroup.tsx","entities/explore/ui/ExploreHeader/ExploreHeader.tsx","entities/explore/ui/MoviesAndTVContainer/MoviesAndTVContainer.tsx","pages/explore/ui/Explore.tsx","shared/ui/Image/Img.tsx","webpack://react_movie/./src/shared/ui/NotFoundResults/NotFoundResults.module.scss?d9f1","shared/ui/NotFoundResults/NotFoundResults.tsx","shared/ui/circleRating/CircleRating.tsx","shared/ui/genres/Genres.tsx","webpack://react_movie/./src/entities/query/ui/QueryContent/QueryContent.module.scss?d78f"],"sourcesContent":["import { FunctionComponent } from 'react';\r\nimport './CarouselCard.scss';\r\nimport Img from 'shared/ui/Image/Img';\r\nimport CircleRating from 'shared/ui/circleRating/CircleRating';\r\nimport Genres from 'shared/ui/genres/Genres';\r\nimport dayjs from 'dayjs';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { IRequestResults } from 'shared/types/typeOfResultRequest/typeOfResultRequest';\r\n\r\ninterface CarouselCardProps {\r\n    item: IRequestResults,\r\n    posterUrl: string,\r\n    endpoint?: string,\r\n    fullInfo?: boolean\r\n    className?: string\r\n    mediaType?: 'tv' | 'movie'\r\n}\r\n\r\nconst CarouselCard: FunctionComponent<CarouselCardProps> = ({ item, posterUrl, endpoint, fullInfo = true, className = '', mediaType }) => {\r\n    const navigate = useNavigate();\r\n\r\n    return (\r\n        <div\r\n            className={`CarouselCard ${className}`}\r\n            onClick={() => navigate(`/${item.media_type || endpoint || mediaType}/${item.id}`)}\r\n        >\r\n            <div className=\"posterBlock\">\r\n                <Img src={posterUrl}/>\r\n                {fullInfo && (<>\r\n                    <CircleRating rating={Number(item.vote_average?.toFixed(1))}/>\r\n                    <Genres genresProps={item.genre_ids?.slice(0, 2)}/>\r\n                </>)}\r\n            </div>\r\n            <div className=\"descriptionCard\">\r\n                <span className=\"title\">\r\n                    {item.title || item.name}\r\n                </span>\r\n                <span className=\"date\">\r\n                    {dayjs(item.release_date || item.first_air_date).format(\r\n                        'MMM D, YYYY',\r\n                    )}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CarouselCard;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"Explore\":\"Explore_Explore__KtK8n\",\"content\":\"Explore_content__S7FLw\"};","// extracted by mini-css-extract-plugin\nexport default {\"ExploreHeader\":\"ExploreHeader_ExploreHeader__eA5qK\",\"pageTitle\":\"ExploreHeader_pageTitle__XxPfc\"};","import { Dispatch, FunctionComponent, MutableRefObject, SetStateAction, useState } from 'react';\r\nimport './SelectGroup.scss';\r\nimport Select from 'react-select/base';\r\nimport { useAppDispatch, useAppSelector } from 'app/providers/storeProviders/utils/hooks';\r\nimport { setGenres, setSorting } from 'entities/explore/model/slice/exploreSlice';\r\n\r\ninterface SelectGroupProps {\r\n    mediaType: 'tv' | 'movie';\r\n    page: MutableRefObject<number>;\r\n    filters: {\r\n        sort_by: string,\r\n        with_genres: string\r\n    };\r\n    setFilters: Dispatch<SetStateAction<{\r\n        sort_by: string;\r\n        with_genres: string;\r\n    }>>;\r\n}\r\n\r\nconst sortByData = [\r\n    { value: 'popularity.desc', label: 'Popularity Descending' },\r\n    { value: 'popularity.asc', label: 'Popularity Ascending' },\r\n    { value: 'vote_average.desc', label: 'Rating Descending' },\r\n    { value: 'vote_average.asc', label: 'Rating Ascending' },\r\n    { value: 'primary_release_date.desc', label: 'Release Date Descending' },\r\n    { value: 'primary_release_date.asc', label: 'Release Date Ascending' },\r\n    { value: 'original_title.asc', label: 'Title (A-Z)' },\r\n];\r\n\r\nconst SelectGroup: FunctionComponent<SelectGroupProps> = ({ mediaType, filters, setFilters, page }) => {\r\n    const dispatch = useAppDispatch();\r\n    const { genresMovie, genresTV } = useAppSelector(state => state.config);\r\n    const explore = useAppSelector(state => state.explore);\r\n    const [showSortBy, setShowSortBy] = useState(false);\r\n    const [showGenres, setShowGenres] = useState(false);\r\n    const [handleTextSortBy, setHandleTextSortBy] = useState('');\r\n    const [handleTextGenres, setHandleTextGenres] = useState('');\r\n\r\n    const onChange = (selectedItems: any, action: any) => {\r\n        if (action.name === 'sortBy') {\r\n            dispatch(setSorting({ ...selectedItems, mediaType }));\r\n            if (action.action !== 'clear') {\r\n                setFilters({ ...filters, sort_by: selectedItems.value });\r\n            } else {\r\n                setFilters({ ...filters, sort_by: '' });\r\n            }\r\n        }\r\n\r\n        if (action.name === 'genres') {\r\n            dispatch(setGenres({ selectedItems, mediaType }));\r\n            if (action.action !== 'clear') {\r\n                let genreId = selectedItems.map((g: {\r\n                    id: number,\r\n                    name: string\r\n                }) => g.id);\r\n                genreId = JSON.stringify(genreId).slice(1, -1);\r\n                setFilters({ ...filters, with_genres: genreId });\r\n            } else {\r\n                setFilters({ ...filters, with_genres: '' });\r\n            }\r\n        }\r\n        page.current = 1;\r\n    };\r\n\r\n    return (\r\n        <div className=\"filters\">\r\n            <Select\r\n                isMulti\r\n                name=\"genres\"\r\n                closeMenuOnSelect={false}\r\n                options={mediaType === 'tv' ? genresTV : genresMovie}\r\n                getOptionLabel={(option) => option!.name}\r\n                getOptionValue={(option) => option!.id.toString()}\r\n                onChange={onChange}\r\n                onInputChange={(inputValue) => setHandleTextGenres(inputValue)}\r\n                inputValue={handleTextGenres}\r\n                onMenuOpen={() => setShowGenres(true)}\r\n                onMenuClose={() => setShowGenres(false)}\r\n                menuIsOpen={showGenres}\r\n                placeholder=\"Select genres\"\r\n                className=\"react-select-container genresDD\"\r\n                classNamePrefix=\"react-select\"\r\n                value={explore[mediaType].genres}/>\r\n            <Select\r\n                name=\"sortBy\"\r\n                value={!!explore[mediaType].sorting.value ? explore[mediaType].sorting : null}\r\n                options={sortByData}\r\n                onChange={onChange}\r\n                isClearable={true}\r\n                placeholder=\"Sort by\"\r\n                className=\"react-select-container sortbyDD\"\r\n                classNamePrefix=\"react-select\"\r\n                onMenuClose={() => setShowSortBy(false)}\r\n                onMenuOpen={() => setShowSortBy(true)}\r\n                menuIsOpen={showSortBy}\r\n                onInputChange={(inputValue) => setHandleTextSortBy(inputValue)}\r\n                inputValue={handleTextSortBy}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SelectGroup;\r\n","import { Dispatch, FunctionComponent, MutableRefObject, SetStateAction } from 'react';\r\nimport cls from './ExploreHeader.module.scss';\r\nimport { SelectGroup } from 'features/explore';\r\n\r\ninterface ExploreHeaderProps {\r\n    mediaType: 'tv' | 'movie';\r\n    page: MutableRefObject<number>;\r\n    filters: {\r\n        sort_by: string,\r\n        with_genres: string\r\n    };\r\n    setFilters: Dispatch<SetStateAction<{\r\n        sort_by: string;\r\n        with_genres: string;\r\n    }>>;\r\n}\r\n\r\nconst ExploreHeader: FunctionComponent<ExploreHeaderProps> = ({ page, mediaType, filters, setFilters }) => {\r\n\r\n    return (\r\n        <div className={cls.ExploreHeader}>\r\n            <div className={cls.pageTitle}>{mediaType === 'tv' ? 'Explore TV Shows' : 'Explore Movies'}</div>\r\n            <SelectGroup\r\n                mediaType={mediaType!}\r\n                filters={filters}\r\n                setFilters={setFilters}\r\n                page={page}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExploreHeader;\r\n","import { FunctionComponent } from 'react';\r\nimport PosterFallback from 'shared/assets/images/no-poster.png';\r\nimport { CarouselCard } from '../../../CarouselCard';\r\nimport cls from '../../../query/ui/QueryContent/QueryContent.module.scss';\r\nimport { useAppSelector } from 'app/providers/storeProviders/utils/hooks';\r\nimport { IMovieResults, ITVResults } from '../../model/types/exploreType';\r\n\r\ninterface MoviesAndTVContainerProps {\r\n    data: Array<IMovieResults | ITVResults>;\r\n    mediaType: 'tv' | 'movie';\r\n}\r\n\r\nconst MoviesAndTVContainer: FunctionComponent<MoviesAndTVContainerProps> = ({ data, mediaType }) => {\r\n    const { url_images } = useAppSelector(state => state.config);\r\n\r\n    return (\r\n        <>\r\n            {data?.map((item) => {\r\n                const posterUrl = item.poster_path ? url_images + item.poster_path : PosterFallback;\r\n                return (\r\n                    <CarouselCard\r\n                        key={item.id}\r\n                        item={item}\r\n                        posterUrl={posterUrl}\r\n                        fullInfo={false}\r\n                        className={cls.contentCard}\r\n                        mediaType={mediaType}\r\n                    />);\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MoviesAndTVContainer;\r\n","import { FunctionComponent, useEffect, useRef, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport cls from './Explore.module.scss';\r\nimport { useAppDispatch, useAppSelector } from 'app/providers/storeProviders/utils/hooks';\r\nimport { fetchExplore } from 'entities/explore/model/slice/exploreSlice';\r\nimport ContentWrapper from 'shared/ui/contentWrapper/ContentWrapper';\r\nimport { ExploreHeader } from 'entities/explore';\r\nimport MoviesAndTVContainer from 'entities/explore/ui/MoviesAndTVContainer/MoviesAndTVContainer';\r\nimport Loader from 'shared/ui/loader/Loader';\r\nimport NotFoundResults from 'shared/ui/NotFoundResults/NotFoundResults';\r\n\r\nconst Explore: FunctionComponent = () => {\r\n    const dispatch = useAppDispatch();\r\n    const { mediaType } = useParams<{\r\n        mediaType: 'tv' | 'movie'\r\n    }>();\r\n    const explore = useAppSelector(state => state.explore);\r\n    const [filters, setFilters] = useState({ sort_by: '', with_genres: '' });\r\n    const pageNum = useRef<number>(1);\r\n\r\n    useEffect(() => {\r\n        pageNum.current = explore[mediaType!].page;\r\n        setFilters({ sort_by: explore[mediaType!].sort_by, with_genres: explore[mediaType!].with_genres });\r\n    }, [mediaType]);\r\n\r\n    useEffect(() => {\r\n        if (!explore.isLoading && mediaType) {\r\n            const page = pageNum.current;\r\n            dispatch(fetchExplore({ page, mediaType, filters }));\r\n        }\r\n    }, [filters]);\r\n\r\n    const fetchNextMovieAndTV = () => {\r\n        const sendData = setTimeout(() => {\r\n            if ((explore[mediaType!].results.length <= explore[mediaType!].total_results) && mediaType) {\r\n                pageNum.current += 1;\r\n                const page = pageNum.current;\r\n                dispatch(fetchExplore({ page, mediaType, filters })).then(() => {\r\n                    clearTimeout(sendData);\r\n                });\r\n            }\r\n        }, 0);\r\n    };\r\n\r\n    return (\r\n        <div className={cls.Explore}>\r\n            <ContentWrapper>\r\n                <ExploreHeader mediaType={mediaType!} page={pageNum} filters={filters} setFilters={setFilters}/>\r\n                {(explore.isLoading && !explore[mediaType!].results.length) && <Loader/>}\r\n                {(!!explore[mediaType!].results.length) ?\r\n                    <InfiniteScroll\r\n                        className={cls.content}\r\n                        next={fetchNextMovieAndTV}\r\n                        hasMore={explore[mediaType!].total_pages >= pageNum.current}\r\n                        loader=\"\"\r\n                        dataLength={explore[mediaType!].results.length || 0}>\r\n                        <MoviesAndTVContainer data={explore[mediaType!].results} mediaType={mediaType!}/>\r\n                    </InfiniteScroll>\r\n                    : <NotFoundResults/>}\r\n            </ContentWrapper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Explore;\r\n","import { FunctionComponent } from 'react';\r\nimport 'react-lazy-load-image-component/src/effects/blur.css';\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport './Img.scss';\r\nimport PosterFallback from 'shared/assets/images/no-poster.png';\r\n\r\ninterface ImgProps {\r\n    src?: string;\r\n    className?: string;\r\n}\r\n\r\nconst Img: FunctionComponent<ImgProps> = ({ src, className = '' }) => {\r\n\r\n    return (\r\n        <LazyLoadImage\r\n            className={className}\r\n            alt=\"\"\r\n            effect=\"blur\"\r\n            placeholderSrc={PosterFallback}\r\n            src={src}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Img;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"NotFoundResults\":\"NotFoundResults_NotFoundResults__i+eYG\"};","import { FunctionComponent } from 'react';\r\nimport cls from './NotFoundResults.module.scss';\r\n\r\nconst NotFoundResults: FunctionComponent = () => {\r\n\r\n    return (\r\n        <span className={cls.NotFoundResults}>\r\n            Sorry, Results not found!\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default NotFoundResults;\r\n","import { FunctionComponent } from 'react';\r\nimport './CircleRating.scss';\r\nimport { buildStyles, CircularProgressbar } from 'react-circular-progressbar';\r\n\r\ninterface CircleRatingProps {\r\n    rating: number;\r\n    className?: string;\r\n    textColor?: string;\r\n}\r\n\r\nconst CircleRating: FunctionComponent<CircleRatingProps> = ({ rating, className = '', textColor = '' }) => {\r\n\r\n    return (\r\n        <div className={`${className} CircleRating`}>\r\n            <CircularProgressbar\r\n                value={rating}\r\n                maxValue={10}\r\n                text={String(rating)}\r\n                styles={buildStyles({\r\n                    pathColor: rating < 5 ? 'red' : rating < 7 ? 'orange' : 'green',\r\n                    textColor: textColor ? textColor : '',\r\n                })}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CircleRating;\r\n","import { FunctionComponent } from 'react';\r\nimport './Genres.scss';\r\nimport { useAppSelector } from 'app/providers/storeProviders/utils/hooks';\r\n\r\ninterface GenresProps {\r\n    genresProps: number[];\r\n    className?: string;\r\n}\r\n\r\nconst Genres: FunctionComponent<GenresProps> = ({ genresProps, className = '' }) => {\r\n    const { genres } = useAppSelector(state => state.config);\r\n\r\n    return (\r\n        <div className={`${className} Genres`}>\r\n            {\r\n                genresProps?.map(g => {\r\n                    if (!genres[g]) return;\r\n                    return (\r\n                        <div key={g} className=\"genre\">\r\n                            {genres[g]}\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Genres;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"contentCard\":\"QueryContent_contentCard__mFB64\"};"],"names":["_ref","_item$vote_average","_item$genre_ids","item","posterUrl","endpoint","fullInfo","className","mediaType","navigate","useNavigate","_jsxs","concat","onClick","media_type","id","children","_jsx","Img","src","_Fragment","CircleRating","rating","Number","vote_average","toFixed","Genres","genresProps","genre_ids","slice","title","name","dayjs","release_date","first_air_date","format","sortByData","value","label","filters","setFilters","page","dispatch","useAppDispatch","genresMovie","genresTV","useAppSelector","state","config","explore","showSortBy","setShowSortBy","useState","showGenres","setShowGenres","handleTextSortBy","setHandleTextSortBy","handleTextGenres","setHandleTextGenres","onChange","selectedItems","action","setSorting","sort_by","setGenres","genreId","map","g","JSON","stringify","with_genres","current","Select","isMulti","closeMenuOnSelect","options","getOptionLabel","option","getOptionValue","toString","onInputChange","inputValue","onMenuOpen","onMenuClose","menuIsOpen","placeholder","classNamePrefix","genres","sorting","isClearable","cls","SelectGroup","data","url_images","poster_path","PosterFallback","CarouselCard","contentCard","Explore","useParams","pageNum","useRef","useEffect","isLoading","fetchExplore","ContentWrapper","ExploreHeader","results","length","Loader","InfiniteScroll","next","fetchNextMovieAndTV","sendData","setTimeout","total_results","then","clearTimeout","hasMore","total_pages","loader","dataLength","MoviesAndTVContainer","NotFoundResults","LazyLoadImage","alt","effect","placeholderSrc","textColor","CircularProgressbar","maxValue","text","String","styles","buildStyles","pathColor"],"sourceRoot":""}